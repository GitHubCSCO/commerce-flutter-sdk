import 'package:optimizely_commerce_api/optimizely_commerce_api.dart';
import 'package:test/test.dart';

void main() {
  group('WishList', () {
    test('fromJson should correctly deserialize JSON to WishList object', () {
      // Arrange
      final json = {
        "id": "W123",
        "name": "Sample Wish List",
        "canAddAllToCart": true,
        "description": "This is a sample wish list",
        "updatedOn": "2024-11-14T12:00:00.000Z",
        "updatedByDisplayName": "Admin User",
        "wishListLinesCount": 5,
        "wishListSharesCount": 2,
        "isSharedList": true,
        "sharedByDisplayName": "John Doe",
        "pagination": {
          "currentPage": 1,
          "pageSize": 10,
          "totalPages": 3,
          "totalItemCount": 30
        },
        "wishListLineCollection": [
          {
            "id": "L123",
            "productName": "Sample Product",
            "qtyOrdered": 2,
            "unitOfMeasure": "PCS"
          },
          {
            "id": "L124",
            "productName": "Another Product",
            "qtyOrdered": 3,
            "unitOfMeasure": "EA"
          }
        ],
        "allowEdit": true,
        "shareOption": "View Only",
        "isAutogenerated": false
      };

      // Act
      final wishList = WishList.fromJson(json);

      // Assert
      expect(wishList.id, "W123");
      expect(wishList.name, "Sample Wish List");
      expect(wishList.canAddAllToCart, true);
      expect(wishList.updatedByDisplayName, "Admin User");
      expect(wishList.pagination?.totalItemCount, 30);
      expect(wishList.wishListLineCollection?.length, 2);
      expect(wishList.wishListLineCollection?[0].productName, "Sample Product");
      expect(wishList.allowEditingBySharedWithUsers, true);
      expect(wishList.shareOption, "View Only");
    });

    test('toJson should correctly serialize WishList object to JSON', () {
      // Arrange
      final wishList = WishList(
        id: "W123",
        name: "Sample Wish List",
        canAddAllToCart: true,
        description: "This is a sample wish list",
        updatedOn: DateTime.parse("2024-11-14T12:00:00.000Z"),
        updatedByDisplayName: "Admin User",
        wishListLinesCount: 5,
        wishListSharesCount: 2,
        isSharedList: true,
        sharedByDisplayName: "John Doe",
        pagination: Pagination(
          currentPage: 1,
          pageSize: 10,
          numberOfPages: 3,
          totalItemCount: 30,
        ),
        wishListLineCollection: [
          WishListLine(
            id: "L123",
            productName: "Sample Product",
            qtyOrdered: 2,
            unitOfMeasure: "PCS",
          ),
          WishListLine(
            id: "L124",
            productName: "Another Product",
            qtyOrdered: 3,
            unitOfMeasure: "EA",
          ),
        ],
        allowEditingBySharedWithUsers: true,
        shareOption: "View Only",
        isAutogenerated: false,
      );

      // Act
      final json = wishList.toJson();

      // Assert
      expect(json["id"], "W123");
      expect(json["name"], "Sample Wish List");
      expect(json["canAddAllToCart"], true);
      expect(json["updatedByDisplayName"], "Admin User");
      expect(json["pagination"]["totalItemCount"], 30);
      expect(json["wishListLineCollection"]?.length, 2);
      expect(
          json["wishListLineCollection"]?[0]["productName"], "Sample Product");
      expect(json["allowEdit"], true);
      expect(json["shareOption"], "View Only");
    });

    test('fromJson should handle empty JSON gracefully', () {
      // Arrange
      Map<String, dynamic> json = {};

      // Act
      final wishList = WishList.fromJson(json);

      // Assert
      expect(wishList.id, isNull);
      expect(wishList.name, isNull);
      expect(wishList.wishListLineCollection, isNull);
    });

    test('toJson should handle empty WishList object gracefully', () {
      // Arrange
      final wishList = WishList();

      // Act
      final json = wishList.toJson();

      // Assert
      expect(json["id"], isNull);
      expect(json["name"], isNull);
      expect(json["wishListLineCollection"], isNull);
    });

    test('fromJson should handle null wishListLineCollection gracefully', () {
      // Arrange
      final json = {
        "id": "W123",
        "wishListLineCollection": null,
      };

      // Act
      final wishList = WishList.fromJson(json);

      // Assert
      expect(wishList.id, "W123");
      expect(wishList.wishListLineCollection, isNull);
    });

    test('toJson should handle null wishListLineCollection gracefully', () {
      // Arrange
      final wishList = WishList(
        id: "W123",
        wishListLineCollection: null,
      );

      // Act
      final json = wishList.toJson();

      // Assert
      expect(json["id"], "W123");
      expect(json["wishListLineCollection"], isNull);
    });
  });
}
