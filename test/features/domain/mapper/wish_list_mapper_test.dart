import 'package:flutter_test/flutter_test.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/availability_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/brand.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/break_price_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/pagination_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/product_price_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/product_unit_of_measure_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/wish_list/wish_list_collection_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/wish_list/wish_list_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/wish_list/wish_list_line_collection_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/entity/wish_list/wish_list_line_entity.dart';
import 'package:commerce_flutter_sdk/src/features/domain/mapper/wish_list_mapper.dart';
import 'package:optimizely_commerce_api/optimizely_commerce_api.dart';

void main() {
  group('WishListTagMapper', () {
    test('should correctly map WishListTagModel to WishListTagEntity', () {
      // Arrange
      final wishListTag = WishListTagModel(
        id: 'tag123',
        tag: 'favorites',
      );

      // Act
      final entity = WishListTagMapper.toEntity(wishListTag);

      // Assert
      expect(entity.id, equals('tag123'));
      expect(entity.tag, equals('favorites'));
    });

    test('should correctly map WishListTagEntity to WishListTagModel', () {
      // Arrange
      const wishListTagEntity = WishListTagEntity(
        id: 'tag456',
        tag: 'electronics',
      );

      // Act
      final model = WishListTagMapper.toModel(wishListTagEntity);

      // Assert
      expect(model.id, equals('tag456'));
      expect(model.tag, equals('electronics'));
    });

    test('should handle null values correctly', () {
      // Arrange
      final wishListTag = WishListTagModel(
        id: null,
        tag: null,
      );

      // Act
      final entity = WishListTagMapper.toEntity(wishListTag);

      // Assert
      expect(entity.id, isNull);
      expect(entity.tag, isNull);
    });

    test('should perform roundtrip conversion correctly', () {
      // Arrange
      final originalTag = WishListTagModel(
        id: 'roundtrip-tag',
        tag: 'test-category',
      );

      // Act
      final entity = WishListTagMapper.toEntity(originalTag);
      final convertedBack = WishListTagMapper.toModel(entity);

      // Assert
      expect(convertedBack.id, equals(originalTag.id));
      expect(convertedBack.tag, equals(originalTag.tag));
    });
  });

  group('WishListEntityMapper', () {
    test(
        'toEntity should convert model to entity with all properties including tags',
        () {
      // Arrange
      final model = WishList(
        id: 'wish123',
        name: 'My Wishlist',
        canAddAllToCart: true,
        description: 'My favorite products',
        updatedOn: DateTime(2023, 1, 1),
        updatedByDisplayName: 'John Doe',
        wishListLinesCount: 5,
        wishListSharesCount: 2,
        isSharedList: false,
        sharedByDisplayName: 'Jane Smith',
        pagination: Pagination(
          page: 1,
          pageSize: 10,
          totalItemCount: 5,
          numberOfPages: 1,
        ),
        wishListLineCollection: [
          WishListLine(
            id: 'line1',
            productId: 'prod1',
            productName: 'Test Product',
          ),
        ],
        allowEditingBySharedWithUsers: true,
        shareOption: 'Public',
        isAutogenerated: false,
        isFavorite: true,
        wishListTags: [
          WishListTagModel(id: 'tag1', tag: 'electronics'),
          WishListTagModel(id: 'tag2', tag: 'favorites'),
        ],
      );

      // Act
      final entity = WishListEntityMapper.toEntity(model);

      // Assert
      expect(entity.id, equals(model.id));
      expect(entity.name, equals(model.name));
      expect(entity.canAddAllToCart, equals(model.canAddAllToCart));
      expect(entity.description, equals(model.description));
      expect(entity.updatedOn, equals(model.updatedOn));
      expect(entity.updatedByDisplayName, equals(model.updatedByDisplayName));
      expect(entity.wishListLinesCount, equals(model.wishListLinesCount));
      expect(entity.wishListSharesCount, equals(model.wishListSharesCount));
      expect(entity.isSharedList, equals(model.isSharedList));
      expect(entity.sharedByDisplayName, equals(model.sharedByDisplayName));
      expect(entity.pagination?.page, equals(model.pagination?.page));
      expect(entity.wishListLineCollection?.length, equals(1));
      expect(entity.allowEditingBySharedWithUsers,
          equals(model.allowEditingBySharedWithUsers));
      expect(entity.shareOption, equals(model.shareOption));
      expect(entity.isAutogenerated, equals(model.isAutogenerated));
      expect(entity.isFavorite, equals(model.isFavorite));
      expect(entity.wishListTags?.length, equals(2));
      expect(entity.wishListTags?[0].id, equals('tag1'));
      expect(entity.wishListTags?[0].tag, equals('electronics'));
      expect(entity.wishListTags?[1].id, equals('tag2'));
      expect(entity.wishListTags?[1].tag, equals('favorites'));
    });

    test('toEntity should handle model with null collections', () {
      // Arrange
      final model = WishList(
        id: 'wish123',
        name: 'My Wishlist',
        pagination: null,
        wishListLineCollection: null,
        wishListTags: null,
      );

      // Act
      final entity = WishListEntityMapper.toEntity(model);

      // Assert
      expect(entity.id, equals(model.id));
      expect(entity.name, equals(model.name));
      expect(entity.pagination, isNull);
      expect(entity.wishListLineCollection, isNull);
      expect(entity.wishListTags, isNull);
    });

    test(
        'toModel should convert entity to model with all properties including tags',
        () {
      // Arrange
      final entity = WishListEntity(
        id: 'wish123',
        name: 'My Wishlist',
        canAddAllToCart: true,
        description: 'My favorite products',
        updatedOn: DateTime(2023, 1, 1),
        updatedByDisplayName: 'John Doe',
        wishListLinesCount: 5,
        wishListSharesCount: 2,
        isSharedList: false,
        sharedByDisplayName: 'Jane Smith',
        pagination: const PaginationEntity(
          currentPage: 1,
          page: 1,
          pageSize: 10,
          defaultPageSize: 10,
          totalItemCount: 5,
          numberOfPages: 1,
          pageSizeOptions: null,
          sortOptions: null,
          sortType: null,
          nextPageUri: null,
          prevPageUri: null,
        ),
        wishListLineCollection: const [
          WishListLineEntity(
            id: 'line1',
            productId: 'prod1',
            productName: 'Test Product',
          ),
        ],
        allowEditingBySharedWithUsers: true,
        shareOption: 'Public',
        isAutogenerated: false,
        isFavorite: true,
        wishListTags: const [
          WishListTagEntity(id: 'tag1', tag: 'electronics'),
          WishListTagEntity(id: 'tag2', tag: 'favorites'),
        ],
      );

      // Act
      final model = WishListEntityMapper.toModel(entity);

      // Assert
      expect(model.id, equals(entity.id));
      expect(model.name, equals(entity.name));
      expect(model.canAddAllToCart, equals(entity.canAddAllToCart));
      expect(model.description, equals(entity.description));
      expect(model.updatedOn, equals(entity.updatedOn));
      expect(model.updatedByDisplayName, equals(entity.updatedByDisplayName));
      expect(model.wishListLinesCount, equals(entity.wishListLinesCount));
      expect(model.wishListSharesCount, equals(entity.wishListSharesCount));
      expect(model.isSharedList, equals(entity.isSharedList));
      expect(model.sharedByDisplayName, equals(entity.sharedByDisplayName));
      expect(model.pagination?.page, equals(entity.pagination?.page));
      expect(model.wishListLineCollection?.length, equals(1));
      expect(model.allowEditingBySharedWithUsers,
          equals(entity.allowEditingBySharedWithUsers));
      expect(model.shareOption, equals(entity.shareOption));
      expect(model.isAutogenerated, equals(entity.isAutogenerated));
      expect(model.isFavorite, equals(entity.isFavorite));
      expect(model.wishListTags?.length, equals(2));
      expect(model.wishListTags?[0].id, equals('tag1'));
      expect(model.wishListTags?[0].tag, equals('electronics'));
      expect(model.wishListTags?[1].id, equals('tag2'));
      expect(model.wishListTags?[1].tag, equals('favorites'));
    });

    test('toModel should handle entity with null collections', () {
      // Arrange
      const entity = WishListEntity(
        id: 'wish123',
        name: 'My Wishlist',
        pagination: null,
        wishListLineCollection: null,
        wishListTags: null,
      );

      // Act
      final model = WishListEntityMapper.toModel(entity);

      // Assert
      expect(model.id, equals(entity.id));
      expect(model.name, equals(entity.name));
      expect(model.pagination, isNull);
      expect(model.wishListLineCollection, isNull);
      expect(model.wishListTags, isNull);
    });

    test('roundtrip conversion preserves all data including tags', () {
      // Arrange
      final originalModel = WishList(
        id: 'wish123',
        name: 'My Wishlist',
        canAddAllToCart: true,
        description: 'My favorite products',
        updatedOn: DateTime(2023, 1, 1),
        updatedByDisplayName: 'John Doe',
        wishListLinesCount: 5,
        wishListSharesCount: 2,
        isSharedList: false,
        sharedByDisplayName: 'Jane Smith',
        isFavorite: true,
        wishListTags: [
          WishListTagModel(id: 'tag1', tag: 'test'),
        ],
      );

      // Act
      final entity = WishListEntityMapper.toEntity(originalModel);
      final resultModel = WishListEntityMapper.toModel(entity);

      // Assert
      expect(resultModel.id, equals(originalModel.id));
      expect(resultModel.name, equals(originalModel.name));
      expect(
          resultModel.canAddAllToCart, equals(originalModel.canAddAllToCart));
      expect(resultModel.description, equals(originalModel.description));
      expect(resultModel.updatedOn, equals(originalModel.updatedOn));
      expect(resultModel.updatedByDisplayName,
          equals(originalModel.updatedByDisplayName));
      expect(resultModel.wishListLinesCount,
          equals(originalModel.wishListLinesCount));
      expect(resultModel.wishListSharesCount,
          equals(originalModel.wishListSharesCount));
      expect(resultModel.isSharedList, equals(originalModel.isSharedList));
      expect(resultModel.sharedByDisplayName,
          equals(originalModel.sharedByDisplayName));
      expect(resultModel.isFavorite, equals(originalModel.isFavorite));
      expect(resultModel.wishListTags?.length, equals(1));
      expect(resultModel.wishListTags?[0].id, equals('tag1'));
      expect(resultModel.wishListTags?[0].tag, equals('test'));
    });
  });

  group('WishListLineEntityMapper', () {
    test(
        'toEntity should convert model to entity with all properties including complex fields',
        () {
      // Arrange
      final createdDate = DateTime(2023, 12, 1, 10, 30);
      final model = WishListLine(
        id: 'line123',
        productUri: '/products/123',
        productId: 'product123',
        smallImagePath: '/images/small.jpg',
        altText: 'Product Image',
        productName: 'Test Product',
        manufacturerItem: 'MFG123',
        customerName: 'Custom Name',
        shortDescription: 'A test product',
        qtyOnHand: 10,
        qtyOrdered: 2,
        erpNumber: 'ERP123',
        pricing: ProductPrice(
          unitNetPrice: 19.99,
          unitNetPriceDisplay: '\$19.99',
        ),
        quoteRequired: false,
        isActive: true,
        canEnterQuantity: true,
        canShowPrice: true,
        canAddToCart: true,
        canShowUnitOfMeasure: true,
        canBackOrder: false,
        trackInventory: true,
        availability: Availability(
          message: 'In Stock',
          messageType: 1,
          requiresRealTimeInventory: true,
        ),
        breakPrices: [
          BreakPriceDto(
            breakQty: 10,
            breakPrice: 18.99,
            breakPriceDisplay: '\$18.99',
          ),
        ],
        unitOfMeasure: 'EA',
        unitOfMeasureDisplay: 'Each',
        unitOfMeasureDescription: 'Individual units',
        baseUnitOfMeasure: 'EA',
        baseUnitOfMeasureDisplay: 'Each',
        qtyPerBaseUnitOfMeasure: 1,
        selectedUnitOfMeasure: 'EA',
        productUnitOfMeasures: [
          ProductUnitOfMeasure(
            productUnitOfMeasureId: 'product123',
            unitOfMeasure: 'EA',
            unitOfMeasureDisplay: 'Each',
            qtyPerBaseUnitOfMeasure: 1,
            roundingRule: 'None',
            availability: Availability(message: 'Available', messageType: 1),
          ),
        ],
        packDescription: 'Single unit pack',
        createdOn: createdDate,
        notes: 'Special notes',
        createdByDisplayName: 'John Creator',
        isSharedLine: false,
        isVisible: true,
        isDiscontinued: false,
        sortOrder: 1,
        brand: Brand(id: 'brand1', name: 'Test Brand'),
        isQtyAdjusted: false,
        allowZeroPricing: false,
      );

      // Act
      final entity = WishListLineEntityMapper.toEntity(model);

      // Assert
      expect(entity.id, equals(model.id));
      expect(entity.productUri, equals(model.productUri));
      expect(entity.productId, equals(model.productId));
      expect(entity.smallImagePath, equals(model.smallImagePath));
      expect(entity.altText, equals(model.altText));
      expect(entity.productName, equals(model.productName));
      expect(entity.manufacturerItem, equals(model.manufacturerItem));
      expect(entity.customerName, equals(model.customerName));
      expect(entity.shortDescription, equals(model.shortDescription));
      expect(entity.qtyOnHand, equals(model.qtyOnHand));
      expect(entity.qtyOrdered, equals(model.qtyOrdered));
      expect(entity.erpNumber, equals(model.erpNumber));
      expect(entity.pricing?.unitNetPrice, equals(model.pricing?.unitNetPrice));
      expect(entity.quoteRequired, equals(model.quoteRequired));
      expect(entity.isActive, equals(model.isActive));
      expect(entity.canEnterQuantity, equals(model.canEnterQuantity));
      expect(entity.canShowPrice, equals(model.canShowPrice));
      expect(entity.canAddToCart, equals(model.canAddToCart));
      expect(entity.canShowUnitOfMeasure, equals(model.canShowUnitOfMeasure));
      expect(entity.canBackOrder, equals(model.canBackOrder));
      expect(entity.trackInventory, equals(model.trackInventory));
      expect(entity.availability?.message, equals(model.availability?.message));
      expect(entity.breakPrices?.length, equals(1));
      expect(entity.breakPrices?[0].breakQty, equals(10));
      expect(entity.unitOfMeasure, equals(model.unitOfMeasure));
      expect(entity.unitOfMeasureDisplay, equals(model.unitOfMeasureDisplay));
      expect(entity.unitOfMeasureDescription,
          equals(model.unitOfMeasureDescription));
      expect(entity.baseUnitOfMeasure, equals(model.baseUnitOfMeasure));
      expect(entity.baseUnitOfMeasureDisplay,
          equals(model.baseUnitOfMeasureDisplay));
      expect(entity.qtyPerBaseUnitOfMeasure,
          equals(model.qtyPerBaseUnitOfMeasure));
      expect(entity.selectedUnitOfMeasure, equals(model.selectedUnitOfMeasure));
      expect(entity.productUnitOfMeasures?.length, equals(1));
      expect(entity.productUnitOfMeasures?[0].productUnitOfMeasureId,
          equals('product123'));
      expect(entity.packDescription, equals(model.packDescription));
      expect(entity.createdOn, equals(createdDate));
      expect(entity.notes, equals(model.notes));
      expect(entity.createdByDisplayName, equals(model.createdByDisplayName));
      expect(entity.isSharedLine, equals(model.isSharedLine));
      expect(entity.isVisible, equals(model.isVisible));
      expect(entity.isDiscontinued, equals(model.isDiscontinued));
      expect(entity.sortOrder, equals(model.sortOrder));
      expect(entity.brand?.id, equals('brand1'));
      expect(entity.brand?.name, equals('Test Brand'));
      expect(entity.isQtyAdjusted, equals(model.isQtyAdjusted));
      expect(entity.allowZeroPricing, equals(model.allowZeroPricing));
    });

    test('toEntity should handle model with null properties', () {
      // Arrange
      final model = WishListLine(
        id: 'line123',
        productId: 'product123',
        pricing: null,
        availability: null,
        breakPrices: null,
        productUnitOfMeasures: null,
        brand: null,
      );

      // Act
      final entity = WishListLineEntityMapper.toEntity(model);

      // Assert
      expect(entity.id, equals(model.id));
      expect(entity.productId, equals(model.productId));
      expect(entity.pricing, isNull);
      expect(entity.availability, isNull);
      expect(entity.breakPrices, isNull);
      expect(entity.productUnitOfMeasures, isNull);
      // Brand is always mapped, so it creates an entity even from null
      expect(entity.brand, isNotNull);
      expect(entity.brand?.id, isNull);
      expect(entity.brand?.name, isNull);
    });

    test(
        'toModel should convert entity to model with all properties including complex fields',
        () {
      // Arrange
      final entity = WishListLineEntity(
        id: 'line123',
        productUri: '/products/123',
        productId: 'product123',
        smallImagePath: '/images/small.jpg',
        altText: 'Product Image',
        productName: 'Test Product',
        manufacturerItem: 'MFG123',
        customerName: 'Custom Name',
        shortDescription: 'A test product',
        qtyOnHand: 10,
        qtyOrdered: 2,
        erpNumber: 'ERP123',
        pricing: const ProductPriceEntity(
          unitNetPrice: 19.99,
          unitNetPriceDisplay: '\$19.99',
          unitListPrice: null,
          unitListPriceDisplay: null,
          extendedUnitListPrice: null,
          extendedUnitListPriceDisplay: null,
          unitRegularPrice: null,
          unitRegularPriceDisplay: null,
          extendedUnitRegularPrice: null,
          extendedUnitRegularPriceDisplay: null,
          extendedUnitNetPrice: null,
          extendedUnitNetPriceDisplay: null,
          unitOfMeasure: null,
          vatRate: null,
          vatAmount: null,
          vatAmountDisplay: null,
          unitListBreakPrices: null,
          unitRegularBreakPrices: null,
          regularPrice: null,
          regularPriceDisplay: null,
          extendedRegularPrice: null,
          extendedRegularPriceDisplay: null,
          actualPrice: null,
          actualPriceDisplay: null,
          extendedActualPrice: null,
          extendedActualPriceDisplay: null,
          regularBreakPrices: null,
          actualBreakPrices: null,
          productId: null,
          isOnSale: null,
          requiresRealTimePrice: null,
          quoteRequired: null,
          additionalResults: null,
          unitCost: null,
          unitCostDisplay: null,
        ),
        quoteRequired: false,
        isActive: true,
        canEnterQuantity: true,
        canShowPrice: true,
        canAddToCart: true,
        canShowUnitOfMeasure: true,
        canBackOrder: false,
        trackInventory: true,
        availability: const AvailabilityEntity(
          message: 'In Stock',
          messageType: 1,
          requiresRealTimeInventory: true,
        ),
        breakPrices: [
          BreakPriceDTOEntity(
            breakQty: 10,
            breakPrice: 18.99,
            breakPriceDisplay: '\$18.99',
          ),
        ],
        unitOfMeasure: 'EA',
        unitOfMeasureDisplay: 'Each',
        unitOfMeasureDescription: 'Individual units',
        baseUnitOfMeasure: 'EA',
        baseUnitOfMeasureDisplay: 'Each',
        qtyPerBaseUnitOfMeasure: 1,
        selectedUnitOfMeasure: 'EA',
        productUnitOfMeasures: [
          const ProductUnitOfMeasureEntity(
            productUnitOfMeasureId: 'product123',
            unitOfMeasure: 'EA',
            unitOfMeasureDisplay: 'Each',
            qtyPerBaseUnitOfMeasure: 1,
            roundingRule: 'None',
            availability:
                AvailabilityEntity(message: 'Available', messageType: 1),
          ),
        ],
        packDescription: 'Single unit pack',
        notes: 'Special notes',
        createdByDisplayName: 'John Creator',
        isSharedLine: false,
        isVisible: true,
        isDiscontinued: false,
        sortOrder: 1,
        brand: const BrandEntity(id: 'brand1', name: 'Test Brand'),
        isQtyAdjusted: false,
        allowZeroPricing: false,
        properties: {'custom': 'value'},
      );

      // Act
      final model = WishListLineEntityMapper.toModel(entity);

      // Assert
      expect(model.id, equals(entity.id));
      expect(model.productUri, equals(entity.productUri));
      expect(model.productId, equals(entity.productId));
      expect(model.smallImagePath, equals(entity.smallImagePath));
      expect(model.altText, equals(entity.altText));
      expect(model.productName, equals(entity.productName));
      expect(model.manufacturerItem, equals(entity.manufacturerItem));
      expect(model.customerName, equals(entity.customerName));
      expect(model.shortDescription, equals(entity.shortDescription));
      expect(model.qtyOnHand, equals(entity.qtyOnHand));
      expect(model.qtyOrdered, equals(entity.qtyOrdered));
      expect(model.erpNumber, equals(entity.erpNumber));
      expect(model.pricing?.unitNetPrice, equals(entity.pricing?.unitNetPrice));
      expect(model.quoteRequired, equals(entity.quoteRequired));
      expect(model.isActive, equals(entity.isActive));
      expect(model.canEnterQuantity, equals(entity.canEnterQuantity));
      expect(model.canShowPrice, equals(entity.canShowPrice));
      expect(model.canAddToCart, equals(entity.canAddToCart));
      expect(model.canShowUnitOfMeasure, equals(entity.canShowUnitOfMeasure));
      expect(model.canBackOrder, equals(entity.canBackOrder));
      expect(model.trackInventory, equals(entity.trackInventory));
      expect(model.availability?.message, equals(entity.availability?.message));
      expect(model.breakPrices?.length, equals(1));
      expect(model.breakPrices?[0].breakQty, equals(10));
      expect(model.unitOfMeasure, equals(entity.unitOfMeasure));
      expect(model.unitOfMeasureDisplay, equals(entity.unitOfMeasureDisplay));
      expect(model.unitOfMeasureDescription,
          equals(entity.unitOfMeasureDescription));
      expect(model.baseUnitOfMeasure, equals(entity.baseUnitOfMeasure));
      expect(model.baseUnitOfMeasureDisplay,
          equals(entity.baseUnitOfMeasureDisplay));
      expect(model.qtyPerBaseUnitOfMeasure,
          equals(entity.qtyPerBaseUnitOfMeasure));
      expect(model.selectedUnitOfMeasure, equals(entity.selectedUnitOfMeasure));
      expect(model.productUnitOfMeasures?.length, equals(1));
      expect(model.productUnitOfMeasures?[0].productUnitOfMeasureId,
          equals('product123'));
      expect(model.packDescription, equals(entity.packDescription));
      expect(model.notes, equals(entity.notes));
      expect(model.createdByDisplayName, equals(entity.createdByDisplayName));
      expect(model.isSharedLine, equals(entity.isSharedLine));
      expect(model.isVisible, equals(entity.isVisible));
      expect(model.isDiscontinued, equals(entity.isDiscontinued));
      expect(model.sortOrder, equals(entity.sortOrder));
      expect(model.brand?.id, equals('brand1'));
      expect(model.brand?.name, equals('Test Brand'));
      expect(model.isQtyAdjusted, equals(entity.isQtyAdjusted));
      expect(model.allowZeroPricing, equals(entity.allowZeroPricing));
      expect(model.properties, equals({'custom': 'value'}));
    });

    test('toModel should handle entity with null properties', () {
      // Arrange
      const entity = WishListLineEntity(
        id: 'line123',
        productId: 'product123',
        pricing: null,
        availability: null,
        breakPrices: null,
        productUnitOfMeasures: null,
        brand: null,
      );

      // Act
      final model = WishListLineEntityMapper.toModel(entity);

      // Assert
      expect(model.id, equals(entity.id));
      expect(model.productId, equals(entity.productId));
      expect(model.pricing, isNull);
      expect(model.availability, isNull);
      expect(model.breakPrices, isNull);
      expect(model.productUnitOfMeasures, isNull);
      expect(model.brand, isNull);
    });

    test('should handle empty collections correctly', () {
      // Arrange
      final model = WishListLine(
        id: 'line123',
        productId: 'product123',
        breakPrices: [],
        productUnitOfMeasures: [],
      );

      // Act
      final entity = WishListLineEntityMapper.toEntity(model);

      // Assert
      expect(entity.breakPrices, hasLength(0));
      expect(entity.productUnitOfMeasures, hasLength(0));
    });

    test('roundtrip conversion preserves all data including complex fields',
        () {
      // Arrange
      final originalModel = WishListLine(
        id: 'line123',
        productId: 'product123',
        productName: 'Test Product',
        qtyOrdered: 2,
        unitOfMeasure: 'EA',
        canAddToCart: true,
        allowZeroPricing: false,
        baseUnitOfMeasure: 'EA',
        baseUnitOfMeasureDisplay: 'Each',
        qtyPerBaseUnitOfMeasure: 1,
        selectedUnitOfMeasure: 'EA',
        packDescription: 'Single pack',
        createdByDisplayName: 'Creator',
        isSharedLine: false,
        isVisible: true,
        isDiscontinued: false,
        sortOrder: 1,
        brand: Brand(id: 'brand1', name: 'Test Brand'),
        isQtyAdjusted: false,
      );

      // Act
      final entity = WishListLineEntityMapper.toEntity(originalModel);
      final resultModel = WishListLineEntityMapper.toModel(entity);

      // Assert
      expect(resultModel.id, equals(originalModel.id));
      expect(resultModel.productId, equals(originalModel.productId));
      expect(resultModel.productName, equals(originalModel.productName));
      expect(resultModel.qtyOrdered, equals(originalModel.qtyOrdered));
      expect(resultModel.unitOfMeasure, equals(originalModel.unitOfMeasure));
      expect(resultModel.canAddToCart, equals(originalModel.canAddToCart));
      expect(
          resultModel.allowZeroPricing, equals(originalModel.allowZeroPricing));
      expect(resultModel.baseUnitOfMeasure,
          equals(originalModel.baseUnitOfMeasure));
      expect(resultModel.baseUnitOfMeasureDisplay,
          equals(originalModel.baseUnitOfMeasureDisplay));
      expect(resultModel.qtyPerBaseUnitOfMeasure,
          equals(originalModel.qtyPerBaseUnitOfMeasure));
      expect(resultModel.selectedUnitOfMeasure,
          equals(originalModel.selectedUnitOfMeasure));
      expect(
          resultModel.packDescription, equals(originalModel.packDescription));
      expect(resultModel.createdByDisplayName,
          equals(originalModel.createdByDisplayName));
      expect(resultModel.isSharedLine, equals(originalModel.isSharedLine));
      expect(resultModel.isVisible, equals(originalModel.isVisible));
      expect(resultModel.isDiscontinued, equals(originalModel.isDiscontinued));
      expect(resultModel.sortOrder, equals(originalModel.sortOrder));
      expect(resultModel.brand?.id, equals(originalModel.brand?.id));
      expect(resultModel.brand?.name, equals(originalModel.brand?.name));
      expect(resultModel.isQtyAdjusted, equals(originalModel.isQtyAdjusted));
    });
  });

  group('WishListLineCollectionEntityMapper', () {
    test('toEntity should convert model to entity with all properties', () {
      // Arrange
      final model = WishListLineCollectionModel(
        wishListLines: [
          WishListLine(
            id: 'line1',
            productId: 'product1',
            productName: 'Product 1',
          ),
          WishListLine(
            id: 'line2',
            productId: 'product2',
            productName: 'Product 2',
          ),
        ],
        pagination: Pagination(
          page: 1,
          pageSize: 10,
          totalItemCount: 2,
          numberOfPages: 1,
        ),
      );

      // Act
      final entity = WishListLineCollectionEntityMapper.toEntity(model);

      // Assert
      expect(entity.wishListLines?.length, equals(2));
      expect(entity.wishListLines?[0].id, equals('line1'));
      expect(entity.wishListLines?[0].productName, equals('Product 1'));
      expect(entity.wishListLines?[1].id, equals('line2'));
      expect(entity.wishListLines?[1].productName, equals('Product 2'));
      expect(entity.pagination?.page, equals(1));
      expect(entity.pagination?.totalItemCount, equals(2));
    });

    test('toEntity should handle model with null collections', () {
      // Arrange
      final model = WishListLineCollectionModel(
        wishListLines: null,
        pagination: null,
      );

      // Act
      final entity = WishListLineCollectionEntityMapper.toEntity(model);

      // Assert
      expect(entity.wishListLines, isNull);
      expect(entity.pagination, isNull);
    });

    test('toModel should convert entity to model with all properties', () {
      // Arrange
      const entity = WishListLineCollectionEntity(
        wishListLines: [
          WishListLineEntity(
            id: 'line1',
            productId: 'product1',
            productName: 'Product 1',
          ),
          WishListLineEntity(
            id: 'line2',
            productId: 'product2',
            productName: 'Product 2',
          ),
        ],
        pagination: PaginationEntity(
          currentPage: 1,
          page: 1,
          pageSize: 10,
          defaultPageSize: 10,
          totalItemCount: 2,
          numberOfPages: 1,
          pageSizeOptions: null,
          sortOptions: null,
          sortType: null,
          nextPageUri: null,
          prevPageUri: null,
        ),
      );

      // Act
      final model = WishListLineCollectionEntityMapper.toModel(entity);

      // Assert
      expect(model.wishListLines?.length, equals(2));
      expect(model.wishListLines?[0].id, equals('line1'));
      expect(model.wishListLines?[0].productName, equals('Product 1'));
      expect(model.wishListLines?[1].id, equals('line2'));
      expect(model.wishListLines?[1].productName, equals('Product 2'));
      expect(model.pagination?.page, equals(1));
      expect(model.pagination?.totalItemCount, equals(2));
    });

    test('toModel should handle entity with null collections', () {
      // Arrange
      const entity = WishListLineCollectionEntity(
        wishListLines: null,
        pagination: null,
      );

      // Act
      final model = WishListLineCollectionEntityMapper.toModel(entity);

      // Assert
      expect(model.wishListLines, isNull);
      expect(model.pagination, isNull);
    });
  });

  group('WishListCollectionEntityMapper', () {
    test('toEntity should convert model to entity with all properties', () {
      // Arrange
      final model = WishListCollectionModel(
        wishListCollection: [
          WishList(
            id: 'wish1',
            name: 'Wishlist 1',
          ),
          WishList(
            id: 'wish2',
            name: 'Wishlist 2',
          ),
        ],
        pagination: Pagination(
          page: 1,
          pageSize: 10,
          totalItemCount: 2,
          numberOfPages: 1,
        ),
      );

      // Act
      final entity = WishListCollectionEntityMapper.toEntity(model);

      // Assert
      expect(entity.wishListCollection?.length, equals(2));
      expect(entity.wishListCollection?[0].id, equals('wish1'));
      expect(entity.wishListCollection?[0].name, equals('Wishlist 1'));
      expect(entity.wishListCollection?[1].id, equals('wish2'));
      expect(entity.wishListCollection?[1].name, equals('Wishlist 2'));
      expect(entity.pagination?.page, equals(1));
      expect(entity.pagination?.totalItemCount, equals(2));
    });

    test('toEntity should handle model with null collections', () {
      // Arrange
      final model = WishListCollectionModel(
        wishListCollection: null,
        pagination: null,
      );

      // Act
      final entity = WishListCollectionEntityMapper.toEntity(model);

      // Assert
      expect(entity.wishListCollection, isNull);
      expect(entity.pagination, isNull);
    });

    test('toModel should convert entity to model with all properties', () {
      // Arrange
      const entity = WishListCollectionEntity(
        wishListCollection: [
          WishListEntity(
            id: 'wish1',
            name: 'Wishlist 1',
          ),
          WishListEntity(
            id: 'wish2',
            name: 'Wishlist 2',
          ),
        ],
        pagination: PaginationEntity(
          currentPage: 1,
          page: 1,
          pageSize: 10,
          defaultPageSize: 10,
          totalItemCount: 2,
          numberOfPages: 1,
          pageSizeOptions: null,
          sortOptions: null,
          sortType: null,
          nextPageUri: null,
          prevPageUri: null,
        ),
      );

      // Act
      final model = WishListCollectionEntityMapper.toModel(entity);

      // Assert
      expect(model.wishListCollection?.length, equals(2));
      expect(model.wishListCollection?[0].id, equals('wish1'));
      expect(model.wishListCollection?[0].name, equals('Wishlist 1'));
      expect(model.wishListCollection?[1].id, equals('wish2'));
      expect(model.wishListCollection?[1].name, equals('Wishlist 2'));
      expect(model.pagination?.page, equals(1));
      expect(model.pagination?.totalItemCount, equals(2));
    });

    test('toModel should handle entity with null collections', () {
      // Arrange
      const entity = WishListCollectionEntity(
        wishListCollection: null,
        pagination: null,
      );

      // Act
      final model = WishListCollectionEntityMapper.toModel(entity);

      // Assert
      expect(model.wishListCollection, isNull);
      expect(model.pagination, isNull);
    });

    test('roundtrip conversion preserves all data', () {
      // Arrange
      final originalModel = WishListCollectionModel(
        wishListCollection: [
          WishList(
            id: 'wish1',
            name: 'Wishlist 1',
          ),
        ],
        pagination: Pagination(
          page: 1,
          pageSize: 10,
          totalItemCount: 1,
          numberOfPages: 1,
        ),
      );

      // Act
      final entity = WishListCollectionEntityMapper.toEntity(originalModel);
      final resultModel = WishListCollectionEntityMapper.toModel(entity);

      // Assert
      expect(resultModel.wishListCollection?.length,
          equals(originalModel.wishListCollection?.length));
      expect(resultModel.wishListCollection?[0].id,
          equals(originalModel.wishListCollection?[0].id));
      expect(resultModel.wishListCollection?[0].name,
          equals(originalModel.wishListCollection?[0].name));
      expect(
          resultModel.pagination?.page, equals(originalModel.pagination?.page));
      expect(resultModel.pagination?.totalItemCount,
          equals(originalModel.pagination?.totalItemCount));
    });
  });
}
